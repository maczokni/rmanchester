aes(x = factor(name), y = signature_count))
c + geom_bar(stat="identity") + coord_flip() +
xlab("Name of country") +
ylab("Number of signatures from country")
})
}
shinyApp(ui = ui, server = server)
#here's the ui file
ui <- fluidPage(
headerPanel('How many people signed the petition?'),
sidebarPanel(
uiOutput('countrySelector',selected = "United Kingdom")
),
mainPanel(
#put here that a plot will be placed here called countriesPlot
textOutput("text1")
)
)
#andhere's the server file
server <- function(input, output) {
#create a list of options to select
countryChoices <- sort(unique(as.character(signByCountry$name)))
#create the drop down menu with name country selector to put in placeholder in UI
output$countrySelector <- renderUI({
selectInput("countrySelect", label = "Select country",
choices = as.list(countryChoices), selected = "United Kingdom")
})
output$text1 <- renderText({
df <- signByCountry[which(signByCountry$name==input$countrySelect),]
paste0("There are ", df$signature_count, " signatures from ", input$countrySelect)
})
}
shinyApp(ui = ui, server = server)
library(dplyr)
ui <- fluidPage(
titlePanel("Accidents in 2015"),
sidebarLayout(
sidebarPanel(
#date selector goes here
dateRangeInput("Date range", inputId = "date_range",
start = "2015-01-01",
end = "2015-12-31",
format = "yyyy-mm-dd")
),
mainPanel(
#plot output goes here
plotOutput("ksiPlot")
)
)
)
server <- function(input, output) {
#filter data based on dates
dateFiltered <- reactive({accidents %>% filter(date2 %in% seq(input$date_range[1],     input$date_range[2], by = "day"))
})
#reactive plot
output$ksiPlot <- renderPlot({
data <- dateFiltered()
c <- ggplot(data,aes(x = factor(severity)))
c + geom_bar() +
xlab("Severity of incident") +
ylab("Number of incidents")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Accidents in 2015"),
sidebarLayout(
sidebarPanel(
#date selector goes here
dateRangeInput("Date range", inputId = "date_range",
start = "2015-01-01",
end = "2015-12-31",
format = "yyyy-mm-dd"),
uiOutput('severitySelector',selected = "Fatal")
),
mainPanel(
#leaflet output goes here
leafletOutput("map", height = 800)
)
)
)
server <- function(input, output) {
severityChoices <- sort(unique(as.character(accidents$severity)))
#create the drop down menu with name country selector to put in placeholder in UI
output$severitySelector <- renderUI({
selectInput("severitySelect", label = "Select severity",
choices = as.list(severityChoices), selected = "Fatal")
})
#filter data based on dates
dateFiltered <- reactive({
thing <- accidents %>% filter(date2 %in% seq(input$date_range[1],     input$date_range[2], by = "day") & severity %in% input$severitySelect)
})
#reactive map
output$map <- renderLeaflet({
leaflet(accidents) %>%
addProviderTiles("CartoDB.Positron") %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat)) %>%
addLegend(position = "bottomleft", colors = c("#b10026", "#fd8d3c", "#ffeda0"),
labels = c("Fatal", "Serious", "Slight"), opacity = 1, title = "Severity")
})
observe({
pal <- colorFactor(c("#b10026", "#fd8d3c", "#ffeda0"), domain = c("Fatal", "Serious", "Slight"), ordered = TRUE)
leafletProxy("map", data = dateFiltered()) %>% clearMarkerClusters() %>%
addCircleMarkers(~lon, ~lat,
color = "#636363", stroke = TRUE, weight = 1,
fillColor = ~pal(severity), fillOpacity = 0.8,
radius = 5,
popup = ~location,
clusterOptions = markerClusterOptions())
})
}
shinyApp(ui = ui, server = server)
recodeOneWay <- function(x) {
if(x == "Matters a lot") {
1
} else if(x == "Matters somewhat"){
2
} else if(x == "Does not matter"){
3
}
}
testDf <- data.frame(matt = c("Matters a lot", "Matters somewhat", "Does not matter","Matters a lot", "Matters somewhat", "Does not matter","Matters a lot", "Matters somewhat", "Does not matter" ),
n = c(1:9))
testDf$recoded <- sapply(testDf$matt, recodeOneWay())
testDf$recoded <- sapply(testDf$matt, recodeOneWay)
testDf$recoded <- sapply(testDf$matt, recodeOneWay)
View(testDf)
recodeOneWay <- function(x) {
if(x == "Matters a lot") {
1
} else if(x == "Matters somewhat"){
2
} else if(x == "Does not matter"){
3
} else {
NA
}
}
testDf <- data.frame(matt = c("Matters a lot", "Matters somewhat", "Does not matter","Matters a lot", "Matters somewhat", "Does not matter","Matters a lot", "Matters somewhat", "Does not matter" ),
n = c(1:9))
testDf$recoded <- sapply(testDf$matt, recodeOneWay)
View(testDf)
testDf <- data.frame(matt = c("Matters a lot", "Matters somewhat", "Does not matter","Matters a lot", "Matters somewhat", "Does not matter","Matters a lot", "Matters somewhat", "Does not matter", "something else" ),
n = c(1:10))
testDf$recoded <- sapply(testDf$matt, recodeOneWay)
View(testDf)
load(file.choose())
library(ggplot2)
scottCrim <- read.table(file.choose(), sep="\t", header=TRUE)
View(head(scottCrim))
scottCrim <- read.table(file.choose(), sep="\t", header=TRUE)
table(scottCrim$da_17)
scottCrim20089 <- scottCrim
scottCrim200910 <- read.table(file.choose(), sep="\t", header=TRUE)
table(scottCrim200910$da_17)
scottCrim2001011 <- read.table(file.choose(), sep="\t", header=TRUE)
table(scottCrim2001011$da_17)
scottCrim2001213 <- read.table(file.choose(), sep="\t", header=TRUE)
table(scottCrim2001213$da_17)
rbind.all.columns <- function(x, y) {
x.diff <- setdiff(colnames(x), colnames(y))
y.diff <- setdiff(colnames(y), colnames(x))
x[, c(as.character(y.diff))] <- NA
y[, c(as.character(x.diff))] <- NA
return(rbind(x, y))
}
scottCrimMerged <- rbind.all.columns(scottCrim20089, scottCrim200910)
scottCrimMerged <- rbind.all.columns(scottCrimMerged, scottCrim2001011)
table(scottCrimMerged$da_17)
scottCrim2001011 <- read.table(file.choose(), sep="\t", header=TRUE)
scottCrim2001011 <- read.table(file.choose(), sep="\t", header=TRUE)
table(scottCrim2001011$da_17)
rbind.all.columns <- function(x, y) {
x.diff <- setdiff(colnames(x), colnames(y))
y.diff <- setdiff(colnames(y), colnames(x))
x[, c(as.character(y.diff))] <- NA
y[, c(as.character(x.diff))] <- NA
return(rbind(x, y))
}
scottCrimMerged <- rbind.all.columns(scottCrim20089, scottCrim200910)
scottCrimMerged <- rbind.all.columns(scottCrimMerged, scottCrim2001011)
table(scottCrimMerged$da_17)
table(scottCrimMerged$qdgen)
table(scottCrimMerged$qdgen,scottCrimMerged$da_17 )
write.csv(scottCrimMerged, file="scottCrimMerged.csv")
library(gmodels)
scottCrimMerged$qdgen2 <- NA
scottCrimMerged$qdgen2 <- ifelse(scottCrimMerged$qdgen==1, "Male", scottCrimMerged$qdgen2)
scottCrimMerged$qdgen2 <- ifelse(scottCrimMerged$qdgen==2, "Female", scottCrimMerged$qdgen2)
table(scottCrimMerged$qdgen)
table(scottCrimMerged$qdgen2)
sqrt(0)
csew1112 <- read.table(file.choose(), dep="\tab", header=TRUE)
csew1112 <- read.table(file.choose(), dep="\t", header=TRUE)
csew1112 <- read.table(file.choose(), sep="\t", header=TRUE)
csew1112 <- read.table(file.choose(), sep="\t", header=TRUE)
csew1415 <- read.table(file.choose(), sep="\t", header=TRUE)
table(csew1415$cdrq2a)
table(csew1415$drq2a)
table(csew1415$druguse)
csew1415 <- read.table(file.choose(), sep="\t", header=TRUE)
csew1415 <- read.table(file.choose(), sep="\t", header=TRUE)
table(csew1415$druguse)
load(file.choose())
wilcox.test(csew$worryx ~ csew$sex)
?wilcox.test()
wilcox.test(csew$worryx ~ csew$sex, paired= FALSE)
wilcox.test(csew$worryx ~ csew$sex, paired = TRUE)
wTest <- wilcox.test(csew$worryx ~ csew$sex, paired = FALSE)
qnorm(wTest$statistic)
qnorm(wTest$p.value)
?qnorm()
z <- (7528300 - mean(csew$worryx)) / stderr(csew$worryx)
library(stats)
z <- (7528300 - mean(csew$worryx)) / sd(csew$worryx)
sd(csew$worryx)
sd(csew$worryx, na.rm = TRUE)
mean(csew$worryx)
mean(csew$worryx, na.rm = TRUE)
(7528300 - mean(csew$worryx, na.rm = TRUE)) / sd(csew$worryx, na.rm = TRUE)
-19.31892/sqrt(nrow(csew))
hist(csew$worryx)
table(csew$sex)
t.test(csew$worryx ~ csew$sex)
library(effsize)
cohen.d(csew$worryx ~ csew$sex)
-19.31892/sqrt(nrow(csew))
qnorm(wTest$p.value)/sqrt(nrow(csew))
nrow(csew)
table(csew1415$druguse)
View(csew1112)
?wilcox.test
table(allAttitudesData2014to2016$yearQ)
allAttitudesData2014to2016 <- read.csv(file.choose())
table(allAttitudesData2014to2016$yearQ)
?prop.test
allAttitudesYesNoQ3Only <- attitudesAllYears[attitudesAllYears$q3 != "(Don't know)",]
attitudesAllYears <- allAttitudesData2014to2016
allAttitudesYesNoQ3Only <- attitudesAllYears[attitudesAllYears$q3 != "(Don't know)",]
yearByQ3 <- allAttitudesYesNoQ3Only %>%
count(yearQ,q3 )
library(dplyr)
yearByQ3 <- allAttitudesYesNoQ3Only %>%
count(yearQ,q3 )
head(yearByQ3)
yearByQ3 <- spread(yearByQ3, q3, n)
yearByQ3 <- yearByQ3[,1:3]
yearByQ3 <- yearByQ3[complete.cases(yearByQ3),]
library(tidyr)
yearByQ3 <- spread(yearByQ3, q3, n)
yearByQ3 <- yearByQ3[,1:3]
yearByQ3 <- yearByQ3[complete.cases(yearByQ3),]
head(yearByQ3)
prop.test(yearByQ3)
prop.test(yearByQ3[,2:3])
summary(glm(q3num ~ yearQ, data = allAttitudesYesNoQ3Only, family=binomial))
prop.test(yearByQ3$Yes, yearByQ3$no)
prop.test(yearByQ3$Yes, yearByQ3$No)
allAttitudesYesNoShOnly$sh1num <- ifelse(allAttitudesYesNoShOnly$sh1=="Yes", 1, 0)
yearBySh1 <- allAttitudesYesNoShOnly %>%
count(yearQ,sh1 )
yearBySh1 <- spread(yearBySh1, sh1, n)
yearBySh1 <- yearBySh1[,1:3]
yearBySh1 <- yearBySh1[complete.cases(yearBySh1),]
allAttitudesYesNoShOnly <- attitudesAllYears[attitudesAllYears$sh1 != "Would rather not say",]
yearBySh1 <- allAttitudesYesNoShOnly %>%
count(yearQ,sh1 )
yearBySh1 <- spread(yearBySh1, sh1, n)
yearBySh1 <- yearBySh1[,1:3]
yearBySh1 <- yearBySh1[complete.cases(yearBySh1),]
prop.test(yearBySh1[,2], yearBySh1[,2])
prop.test(yearBySh1$Yes, yearBySh1$no)
prop.test(yearBySh1$Yes, yearBySh1$No)
nypdData <- read.csv("/Users/reka/Desktop/NYPD_Complaint_Map__Historic_.csv")
offTypes <- unique(nypdData$OFNS_DESC)
View(as.data.frame(table(nypdData$OFNS_DESC)))
murderEtc <- nypdData[grepl("murder", tolower(nypdData$$OFNS_DESC)),]
murderEtc <- nypdData[grepl("murder", tolower(nypdData$OFNS_DESC)),]
View(head(murderEtc))
glm(PREM_TYP_DESC ~ KY_CD + PD_CD, family = binomial(logit), data = nypdData)
table(nypdData$JURIS_DESC)
table(nypdData$BORO_NM)
summery(glm(BORO_NM ~ KY_CD + PD_CD, family = binomial(logit), data = nypdData))
summary(glm(BORO_NM ~ KY_CD + PD_CD, family = binomial(logit), data = nypdData))
?glm
nypdData$testThing <- ifelse(nypdData$BORO_NM =="BRONX", "yees", "no")
summary(glm(testThing ~ KY_CD + PD_CD, family = binomial(logit), data = nypdData))
table(nypdData$testThing)
summary(glm(testThing ~ KY_CD + PD_CD, family = binomial(logit), data = nypdData))
hist(casualties$Age_of_Casualty)
ggplot(casualties, aes(Age_of_Casualty)) +
geom_histogram()
library(ggplot2)
ggplot(casualties, aes(Age_of_Casualty)) +
geom_histogram()
ggplot(casualties, aes(Age_of_Casualty)) +
geom_histogram(binwidth = 1)
load(file.choose())
my_model_1 <- glm(fights ~ delfr + pubgoing + respsex, family = binomial(logit), data = OCJS2006w6)
load(file.choose())
my_model_1 <- glm(fights ~ delfr + pubgoing + respsex, family = binomial(logit), data = OCJS2006w9)
OCJS2006w9$delfr <- OCJS2006w9$h1fren
my_model_1 <- glm(fights ~ delfr + pubgoing + respsex, family = binomial(logit), data = OCJS2006w9)
allAttitudesData2014to2016[407:413] <- apply(allAttitudesData2014to2016[407:413], MARGIN = 2, FUN= function(x) sapply(x,turnNotIntoNa))
allAttitudesData2014to2016 <- read.csv(file.choose())
which( colnames(allAttitudesData2014to2016)=="q2ai_1" )
which( colnames(allAttitudesData2014to2016)=="q2ai_7" )
turnNotIntoNa <- function(x){
if(grepl("Not", as.character(x))){
NA
} else {
as.character(x)
}
}
allAttitudesData2014to2016[407:413] <- apply(allAttitudesData2014to2016[407:413], MARGIN = 2, FUN= function(x) sapply(x,turnNotIntoNa))
allAttitudesData2014to2016$numPrec <- sapply(allAttitudesData2014to2016[407:413 ], function(x) length(which(!is.na(x))))
allAttitudesData2014to2016$numPrec <- sapply(allAttitudesData2014to2016[,407:413], function(x) length(which(!is.na(x))))
allAttitudesData2014to2016$numPrec <- apply(allAttitudesData2014to2016[,407:413], MARGIN = 1, function(x) length(which(!is.na(x))))
View(head(allAttitudesData2014to2016[407:414],n=20))
which( colnames(allAttitudesData2014to2016)=="numPrec" )
View(head(allAttitudesData2014to2016[c(407:413,9923],n=20))
View(head(allAttitudesData2014to2016[c(407:413,9923)],n=20))
setwd("~/Desktop/rmanchester")
knitr::opts_chunk$set(echo = FALSE)
library(waffle)
crimes <- c(`Uneventful journeys`=999,992, `Journeys with incidents`=8)
waffle(crimes, rows=7, size=0.5,
colors=c("#c7d4b6", "#a3aabd"),
title="Average Household Savings Each Year",
xlab="1 square == $392")
crimes <- c(`Uneventful journeys`=999,992, `Journeys with incidents`= 8)
waffle(crimes, rows=7, size=0.5,
colors=c("#c7d4b6", "#a3aabd"),
title="Average Household Savings Each Year",
xlab="1 square == $392")
waffle(crimes, rows=7, size=0.5,
colors=c("#c7d4b6", "#a3aabd"),
title="Average Household Savings Each Year",
xlab="1 square == $392")
waffle(crimes, rows=7, size=1,
colors=c("#c7d4b6", "#a3aabd"),
title="Average Household Savings Each Year",
xlab="1 square == $392")
waffle(crimes, rows=7, size=1,
colors=c("#c7d4b6", "#a3aabd"))
waffle(crimes, rows=7, size=1,
colors=c("#c7d4b6", "#a3aabd"),
title="Average Household Savings Each Year",
xlab="1 square == $392")
crimes <- c('Uneventful journeys' = 999992, 'Journeys with incidents' = 8)
waffle(crimes, rows=7, size=1,
colors=c("#c7d4b6", "#a3aabd"),
title="Average Household Savings Each Year",
xlab="1 square == $392")
waffle(crimes, rows=7, size=1,
colors=c("#c7d4b6", "#a3aabd"),
title="Average Household Savings Each Year",
xlab="1 square == $392")
crimes <- c('Uneventful journeys' = 124999, 'Journeys with incidents' = 1)
waffle(crimes, rows=1000, size=0.3,
colors=c("#c7d4b6", "#a3aabd"),
title="Average Household Savings Each Year",
xlab="1 square == $392")
crimes <- c('Uneventful journeys' = 124999, 'Journeys with incidents' = 1)
waffle(crimes, rows=1000, size=0.3,
colors=c("#c7d4b6", "#a3aabd"),
title="Average Household Savings Each Year",
xlab="1 square == $392")
V1 <- c(1, 2)
V2 <- c(1, 1)
library(reshape2)
dat <- data.frame(V1, V2)
dat.c <- dcast(dat, V1 ~ V2)
dat.m <- melt(dat.c, id.var = "V1")
ggplot(dat.m, aes(V1, variable)) + geom_point(aes(size = value))
View(dat)
View(dat.c)
V3 <- c(1, 124999)
dat <- data.frame(V1, V2, V3)
ggplot(dat, aes(V1, V2)) + geom_point(aes(size = V3))
V4 <- c(8, 999992)
ggplot(dat, aes(V1, V2)) + geom_point(aes(size = V4))
V1 <- c(1, 1.25)
dat <- data.frame(V1, V2, V3, V4)
ggplot(dat, aes(V1, V2)) + geom_point(aes(size = V4))
ggplot(dat, aes(V1, V2)) + geom_point(aes(size = V4)) +
xlim(c(0,2))
ggplot(dat, aes(V1, V2)) + geom_point(aes(size = V4)) +
xlim(c(0,2)) +
ylim(c(0.75, 1.25))
ggplot(dat, aes(V1, V2, size = V4)) + geom_point()) +
xlim(c(0,2)) +
ylim(c(0.75, 1.25))
ggplot(dat, aes(V1, V2, size = V4)) + geom_point() +
xlim(c(0,2)) +
ylim(c(0.75, 1.25))
ggplot(dat, aes(V1, V2, size = V4)) + geom_point() +
xlim(c(0,2)) +
ylim(c(0.75, 1.25)) +
scale_size_continuous(limits=c(1,1000000))
ggplot(dat, aes(V1, V2, size = V4)) + geom_point() +
xlim(c(0,2)) +
ylim(c(0.75, 1.25)) +
scale_size_continuous(limits=c(1,1000000), trans=sqrt)
ggplot(dat, aes(V1, V2, size = V4)) + geom_point() +
xlim(c(0,2)) +
ylim(c(0.75, 1.25)) +
scale_size_continuous(limits=c(1,1000000), trans="sqrt")
V4 <- c(8, 999992000)
dat <- data.frame(V1, V2, V3, V4)
ggplot(dat, aes(V1, V2, size = V4)) + geom_point() +
xlim(c(0,2)) +
ylim(c(0.75, 1.25))
ggplot(dat, aes(V1, V2, size = sqrt(V4)) + geom_point() +
xlim(c(0,2)) +
ylim(c(0.75, 1.25))
)
ggplot(dat, aes(V1, V2, size = sqrt(V4))) + geom_point() +
xlim(c(0,2)) +
ylim(c(0.75, 1.25))
p <- ggplot(data=dat, aes(x=V1,y=V2))
p + geom_point(aes(size=V4), pch=22, fill='#0000FF75', col=NA)
p <- ggplot(data=dat, aes(x=V1,y=V2))
p + geom_point(aes(size=V4), pch=22, fill='#0000FF75', col=NA) +
scale_area(range = c(1, 40))
library(ggplot2)
p + geom_point(aes(size=V4), pch=22, fill='#0000FF75', col=NA) +
scale_area(range = c(1, 40))
ggplot(dat, aes(V1, V2, size = sqrt(V4))) + geom_point() +
xlim(c(0,2)) +
ylim(c(0.75, 1.25)) +
scale_size_continuous(name="area", range = c(1,1000000))
ggplot(dat, aes(V1, V2, size = sqrt(V4))) + geom_point() +
xlim(c(0,2)) +
ylim(c(0.75, 1.25)) +
scale_size_continuous(name="area", range = c(1,124999))
ggplot(dat, aes(V1, V2, size = sqrt(V4))) + geom_point() +
xlim(c(0,2)) +
ylim(c(0.75, 1.25)) +
scale_size_continuous(name="area", range = c(1,12499))
ggplot(dat, aes(V1, V2, size = sqrt(V4))) + geom_point() +
xlim(c(0,2)) +
ylim(c(0.75, 1.25)) +
scale_size_continuous(name="area", range = c(1,1249))
ggplot(dat, aes(V1, V2, size = sqrt(V4))) + geom_point() +
xlim(c(0,2)) +
ylim(c(0.75, 1.25)) +
scale_size_continuous(name="area", range = c(1,124))
ggplot(dat, aes(V1, V2, size = sqrt(V4))) + geom_point() +
xlim(c(0,2)) +
ylim(c(0.75, 1.25)) +
scale_size_continuous(name="area", range = c(1,100))
ggplot(dat, aes(V1, V2, size = V3)) + geom_point() +
xlim(c(0,2)) +
ylim(c(0.75, 1.25)) +
scale_size_continuous(name="area", range = c(1,100))
V1 <- c(1, 2)
V2 <- c(1, 1)
V3 <- c(1, 124999)
dat <- data.frame(V1, V2, V3, V4)
ggplot(dat, aes(V1, V2, size = V3)) + geom_point() +
scale_size_continuous(name="area", range = c(1,100))
ggplot(dat, aes(V1, V2, size = V3)) + geom_point() +
scale_size_continuous(guide=FALSE, range = c(1,100))
ggplot(dat, aes(V1, V2, size = V3)) + geom_point() +
scale_size_continuous(guide=FALSE, range = c(0.1,1000))
ggplot(dat, aes(V1, V2, size = V3)) + geom_point() +
scale_size_continuous(guide=FALSE, range = c(0.1,100))
ggplot(dat, aes(V1, V2, size = V3)) + geom_point() +
scale_size_continuous(guide=FALSE, range = c(0.1,100)) +
theme_bw()
ggplot(dat, aes(V1, V2, size = V3)) + geom_point() +
scale_size_continuous(guide=FALSE, range = c(0.1,300)) +
theme_bw()
V5 <- c(0.0024, 300)
dat <- data.frame(V1, V2, V3, V4, V5)
ggplot(dat, aes(V1, V2, size = V5)) + geom_point() +
scale_size_continuous(guide=FALSE, range = c(0.0001,300)) +
theme_bw()
x <- c(1, 2)
y <- c(1, 1)
V3 <- c(1, 124999)
V4 <- c(8, 999992000)
V5 <- c(0.0024, 300)
dat <- data.frame(V1, V2, V3, V4, V5)
ggplot(dat, aes(x, y, size = V5)) + geom_point() +
scale_size_continuous(guide=FALSE, range = c(0.0001,300)) +
theme_bw()
crime_type <- c("Other Notifiable Crime",
"Criminal damage",
"Robbery",
"Sexual offences",
"Theft and Handling",
"VAP")
count <- c(110, 314, 207, 182, 1847, 1621)
dat2 <- data.frame(crime_type, count)
ggplot(data = dat2, aes(x = reorder(crime_type, -count), y = count)) +
geom_bar(stat = "identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=rel(5))) +
labs(list( x = "Crime type",
y = "Number of incidents")) +
coord_flip()
ggplot(data = dat2, aes(x = reorder(crime_type, -count), y = count)) +
geom_bar(stat = "identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 270, hjust = 1), text = element_text(size=rel(5))) +
labs(list( x = "Crime type",
y = "Number of incidents")) +
coord_flip()
??fromJSON
??readLines
